{"version":3,"sources":["genLocation.js","components/Roundel.react.js","genStations.js","App.react.js","reportWebVitals.js","index.js"],"names":["genLocation","Promise","resolve","reject","geolocator","locate","enableHighAccuracy","timeout","maximumWait","maximumAge","desiredAccuracy","fallbackToIP","err","location","coords","lat","latitude","lon","longitude","Roundel","className","type","xmlns","viewBox","cx","cy","r","x","y","width","height","genStations","a","apiUrl","fetch","data","json","body","filterNulls","stopPoints","map","parseStations","Error","station","name","commonName","modes","getModeEnum","mode","toLowerCase","arrayWithNulls","filter","element","App","useState","setStation","error","setError","isLoading","setIsLoading","useEffect","result","stations","loadStation","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRASe,SAASA,IACrB,OAAO,IAAIC,SAAkB,SAACC,EAASC,GACtCC,IAAWC,OAAO,CACdC,oBAAoB,EACpBC,QAAS,IACTC,YAAa,IACbC,WAAY,EACZC,gBAAiB,IACjBC,cAAc,IACf,SAACC,EAAKC,GACL,GAAID,EACAT,EAAOS,OACJ,CACH,MAAkDC,EAA3CC,OAAmBC,EAA1B,EAAgBC,SAA0BC,EAA1C,EAA+BC,UAC/BhB,EAAQ,CAACa,MAAKE,e,uBChBX,SAASE,IACpB,OACI,qBAAKC,UAAU,UAAUC,KAAK,cAA9B,SACI,sBAAKC,MAAM,6BAA6BC,QAAQ,cAAhD,UACI,wBAAQH,UAAU,uBAAuBI,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC3D,wBAAQN,UAAU,uBAAuBI,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC3D,sBAAMN,UAAU,oBAAoBO,EAAE,IAAIC,EAAE,OAAOC,MAAM,KAAKC,OAAO,OACrE,qBAAKV,UAAU,uB,MCHhB,SAAeW,EAA9B,kC,4CAAe,WAA2BlB,GAA3B,mBAAAmB,EAAA,6DACLC,EADK,gDAC6CpB,EAASE,IADtD,gBACiEF,EAASI,IAD1E,+DAGYiB,MAAMD,GAHlB,cAGDE,EAHC,gBAIYA,EAAKC,OAJjB,cAIDC,EAJC,yBAKAC,EAAYD,EAAKE,WAAWC,IAAIC,KALhC,wCAOD,IAAIC,MAAJ,mCAPC,2D,sBAWf,SAASD,EAAcE,GACnB,GAAe,MAAXA,EAAiB,CACjB,IAAmBC,EAAeD,EAA3BE,WAAkBC,EAASH,EAATG,MACzB,GAAY,MAARF,GAAyB,MAATE,EACjB,MAAQ,CACJF,OACAE,MAAOR,EAAYQ,EAAMN,IAAIO,KAIxC,OAAO,KAGX,SAASA,EAAYC,GACjB,GAAoB,kBAATA,EAAmB,OAAO,KACrC,OAAOA,EAAKC,eACR,IAAK,OACD,MAAO,OACX,IAAK,aACD,MAAO,aACX,IAAK,MACD,MAAO,MACX,QACI,OAAO,MAInB,SAASX,EAAYY,GACjB,OAAOA,EAAeC,QAAO,SAAAC,GAAO,OAAe,MAAXA,KCR7BC,MAhCf,WACE,MAA8BC,mBAAmB,MAAjD,mBAAOX,EAAP,KAAgBY,EAAhB,KACA,EAA0BD,oBAAkB,GAA5C,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAkCH,oBAAkB,GAApD,mBAAOI,EAAP,KAAkBC,EAAlB,KAkBA,OAjBAC,qBAAU,WAAM,4CACd,8BAAA5B,EAAA,6DACE2B,GAAa,GACbJ,EAAW,MACXE,GAAS,GAHX,SAIuBzD,IAJvB,cAIQ6D,EAJR,gBAKyB9B,EAAY8B,GALrC,OAKQC,EALR,OAMEP,EAAWO,EAAS,IACpBH,GAAa,GAPf,6CADc,sBAUd,KAVe,WAAD,wBAWZI,GACA,MAAMnD,GACN6C,GAAS,GACTE,GAAa,MAEd,IAED,qBAAKvC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACCsC,GAAa,6DACZF,GAASb,GAAW,8BAAIA,EAAQC,KAAZ,KAAoBD,EAAQG,MAAMkB,KAAK,MAAvC,aCxBfC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1d2eca3e.chunk.js","sourcesContent":["// @flow\n\nimport geolocator from 'geolocator';\n\nexport type Location = $ReadOnly<{\n    lat: number,\n    lon: number,\n}>;\n\nexport default function genLocation(): Promise<Location> {\n   return new Promise<Location>((resolve, reject) => {\n    geolocator.locate({\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumWait: 5000,\n        maximumAge: 0,\n        desiredAccuracy: 100,\n        fallbackToIP: true,\n    }, (err, location) => {\n        if (err) {\n            reject(err);\n        } else {\n            const {coords: {latitude: lat, longitude: lon}} = location;\n            resolve({lat, lon});\n        }\n    });\n    })\n}","// @flow\n\nimport React from 'react';\n\nimport \"./Roundel.css\";\nimport \"./Roundel.animation.css\";\n\nexport default function Roundel(): React$MixedElement {\n    return (\n        <div className=\"roundel\" type=\"underground\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n                <circle className=\"roundel-outer-circle\" cx=\"50\" cy=\"50\" r=\"40\" />\n                <circle className=\"roundel-inner-circle\" cx=\"50\" cy=\"50\" r=\"26\" />\n                <rect className=\"roundel-rectangle\" x=\"1\" y=\"42.5\" width=\"98\" height=\"15\" />\n                <div className=\"roundel-label\" />\n            </svg>\n        </div>\n    );\n}","// @flow\n\nimport type {Location} from './genLocation';\n\ntype Mode = \"Tube\" | \"Overground\" | \"DLR\";\n\nexport type Station = $ReadOnly<{\n    name: string,\n    modes: $ReadOnlyArray<Mode>,\n}>;\n\nexport default async function genStations(location: Location): Promise<$ReadOnlyArray<Station>> {\n    const apiUrl = `https://api.tfl.gov.uk/StopPoint/?lat=${location.lat}&lon=${location.lon}&stopTypes=NaptanMetroStation&radius=1000`;\n    try {\n        const data = await fetch(apiUrl);\n        const body = await data.json();\n        return filterNulls(body.stopPoints.map(parseStations));\n    } catch(err) {\n        throw new Error(`Couldn't fetch nearest stations`);\n    }\n}\n\nfunction parseStations(station): ?Station {\n    if (station != null) {\n        const {commonName: name, modes} = station;\n        if (name != null && modes != null) {\n           return ({\n               name,\n               modes: filterNulls(modes.map(getModeEnum)),\n           });\n        }\n    }\n    return null;\n}\n\nfunction getModeEnum(mode): ?Mode {\n    if (typeof mode !== 'string') return null;\n    switch(mode.toLowerCase()) {\n        case 'tube':\n            return 'Tube';\n        case 'overground':\n            return 'Overground';\n        case 'dlr':\n            return 'DLR';\n        default:\n            return null;\n    }\n}\n\nfunction filterNulls(arrayWithNulls: $ReadOnlyArray<any>): $ReadOnlyArray<any> {\n    return arrayWithNulls.filter(element => element != null);\n}","// @flow\n\nimport genLocation from './genLocation';\n\nimport React, { useEffect, useState } from \"react\";\nimport Roundel from \"./components/Roundel.react\";\nimport \"./App.css\";\nimport genStations from \"./genStations\";\nimport type { Station } from \"./genStations\";\n\nfunction App(): React$MixedElement {\n  const [station, setStation] = useState<?Station>(null);\n  const [error, setError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  useEffect(() => {\n    async function loadStation() {\n      setIsLoading(true);\n      setStation(null);\n      setError(false);\n      const result = await genLocation();\n      const stations = await genStations(result);\n      setStation(stations[0]);\n      setIsLoading(false);\n    }\n    try {\n      loadStation();\n    } catch(err) {\n      setError(true);\n      setIsLoading(false);\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Roundel />\n        {isLoading && <p>Loading station information</p>}\n        {!error && station && <p>{station.name} ({station.modes.join(', ')})</p>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.react\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}